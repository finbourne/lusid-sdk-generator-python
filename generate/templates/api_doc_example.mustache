```python
from __future__ import print_function
import time
import {{{packageName}}}
from {{{packageName}}}.rest import ApiException
{{#vendorExtensions.x-py-example-import}}
{{{.}}}
{{/vendorExtensions.x-py-example-import}}
from pprint import pprint

{{> python_doc_auth_partial}}

# Enter a context with an instance of the ApiClientFactory to ensure the connection pool is closed after use
{{#asyncio}}async {{/asyncio}}with api_client_factory:
    # Create an instance of the API class
    api_instance = api_client_factory.build({{{packageName}}}.{{{classname}}})
    {{#allParams}}
    {{paramName}} = {{{example}}} # {{{dataType}}} | {{{description}}}{{^required}} (optional){{/required}}{{#defaultValue}} (default to {{{.}}}){{/defaultValue}}
    {{/allParams}}

    try:
        {{#summary}}
        # {{{.}}}
        {{/summary}}
        {{#returnType}}api_response = {{/returnType}}{{#asyncio}}await {{/asyncio}}api_instance.{{{operationId}}}({{#allParams}}{{#required}}{{paramName}}{{/required}}{{^required}}{{paramName}}={{paramName}}{{/required}}{{^-last}}, {{/-last}}{{/allParams}})
        {{#returnType}}
        print("The response of {{classname}}->{{operationId}}:\n")
        pprint(api_response)
        {{/returnType}}
    except Exception as e:
        print("Exception when calling {{classname}}->{{operationId}}: %s\n" % e)
```
