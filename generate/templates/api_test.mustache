# coding: utf-8

{{>partial_header}}

from typing import List, Dict
import unittest
import json
from xeger import Xeger
from {{modelPackage}} import *
import os
import pytest
from {{apiPackage}}.{{classFilename}} import {{classname}}  # noqa: E501
from {{packageName}} import (
    ApiClientFactory,
    ArgsConfigurationLoader
)


class {{#operations}}Test{{classname}}(unittest.IsolatedAsyncioTestCase):

    async def asyncSetUp(self) -> None:
        if "BASE_URL" in os.environ:
            api_url = os.environ["BASE_URL"]
        else:
            api_url = "http://localhost:5000"
        config_loaders = [
            ArgsConfigurationLoader(api_url=api_url, access_token="UNUSED")
        ]
        api_client_factory = ApiClientFactory(config_loaders=config_loaders)
        self.api = api_client_factory.build({{classname}}) # noqa: E501
        return await super().asyncSetUp()


    async def asyncTearDown(self) -> None:
        if self.api is not None:
            await self.api.api_client.close()
        return await super().asyncTearDown()


   {{#operation}}
    @pytest.mark.asyncio
    async def test_{{operationId}}(self) -> None:
        numRuns = 0
        numExamples = 1
        while numRuns < numExamples:
            numRuns += 1
            {{#allParams}}
            {{^vendorExtensions.x-regex}}
            {{#isPrimitiveType}}
            {{#isUuid}}
            # this parameter must follow the uuid syntax - make sure it doesn't contain invalid characters
            if "_" in {{{example}}}:
                {{paramName}}: {{{dataType}}} = "71beb2cb-be3a-4662-b8ee-e5ded63b957a"
            else:
                {{paramName}}: {{{dataType}}} = {{{example}}}
            {{/isUuid}}
            {{^isUuid}}
            {{paramName}}: {{{dataType}}} = {{{example}}}
            {{/isUuid}}
            {{/isPrimitiveType}}
            {{^isPrimitiveType}}
            {{#content}}
            spec_filepath = os.environ['OPENAPI_SPEC_PATH']
            with open(spec_filepath) as file:
                openapiSpecJson = file.read()
            
            method = "{{httpMethod}}".replace("Http", "").lower()
            jsonContent = json.loads(openapiSpecJson)
            jsonContent = jsonContent["paths"]["{{path}}"][method]["requestBody"]["content"]["application/json"]
            {{paramName}}: {{{dataType}}} = None
            if "example" in jsonContent:
                {{paramName}}: {{dataType}} = jsonContent["example"]
            elif "examples" in jsonContent:
                examples = jsonContent["examples"]
                examples = [examples[key] for key in examples]
                example = examples[numRuns - 1]
                {{paramName}}: {{dataType}} = example["value"]
                numExamples = len(examples)

            if hasattr({{dataType}}, 'from_dict') and callable(getattr({{dataType}}, 'from_dict')):
                {{paramName}} = {{dataType}}.from_dict({{paramName}})

            {{/content}}
            {{^content}}
            {{#isArray}}
            {{paramName}}: {{{dataType}}} = {{{example}}}{{/isArray}}
            {{^isArray}}
            {{paramName}}: {{{dataType}}} = json.loads("""{{{example}}}"""){{/isArray}}
            {{/content}}
            {{/isPrimitiveType}}
            {{/vendorExtensions.x-regex}}
            {{/allParams}}
            {{#returnType}}response = {{/returnType}}await self.api.{{operationId}}({{#allParams}}{{paramName}}{{^-last}}, {{/-last}}{{/allParams}})
            {{#returnType}}
            assert(response is not None)
            {{/returnType}}

   {{/operation}}
{{/operations}}

if __name__ == '__main__':
    unittest.main()