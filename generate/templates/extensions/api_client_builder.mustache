from {{packageName}}.extensions.api_configuration import ApiConfiguration
import logging
from typing import Union
from {{packageName}}.api_client import ApiClient as AsyncApiClient
from {{packageName}}.extensions.api_client import ApiClient
from {{packageName}}.extensions.refreshing_token import RefreshingToken
from {{packageName}}.extensions.config_exceptions import MissingConfigError
from {{packageName}}.configuration import Configuration
import {{packageName}}.extensions.retry as retry
from urllib3 import make_headers
from urllib3.connection import HTTPConnection
import os

logger = logging.getLogger(__name__)


def get_access_token(api_config: ApiConfiguration, id_provider_response_handler=None):
    fields_required_for_refreshing_token = [
        "api_url",
        "password",
        "username",
        "client_id",
        "client_secret",
        "token_url",
    ]
    if api_config.access_token is not None and api_config.api_url is not None:
        logger.debug("using PAT to authenticate")
        api_token = api_config.access_token
    elif all(
        (
            getattr(api_config, required_field) is not None
            for required_field in fields_required_for_refreshing_token
        )
    ):
        logger.debug("using refreshing token to authenticate")
        api_token = RefreshingToken(
            api_configuration=api_config,
            id_provider_response_handler=id_provider_response_handler,
        )
    else:
        logger.error("fields required to authenticate not provided")
        raise MissingConfigError("fields required to authenticate not provided")
        # Initialise the API client using the token so that it can be included in all future requests
    return api_token


def build_client(
    api_config: ApiConfiguration,
    build_async_client=False,
    id_provider_response_handler=None,
    tcp_keep_alive=False,
    certificate_filename=None,
    correlation_id=None,
    app_name=None,
    get_access_token=get_access_token,
) -> Union[AsyncApiClient, ApiClient]:
    config = Configuration(access_token = get_access_token(api_config))
    if tcp_keep_alive:
        config.socket_options = HTTPConnection.default_socket_options + [
                (socket.SOL_SOCKET, socket.SO_KEEPALIVE, 1),
            ]
    config.host = api_config.api_url

    # Set the certificate from the configuration
    config.ssl_ca_cert = api_config.certificate_filename

    # Set the proxy for LUSID if needed
    if api_config.proxy_config is not None:
        config.proxy = api_config.proxy_config.address
        config.proxy_headers = make_headers(
            proxy_basic_auth=f"{api_config.proxy_config.username}:{api_config.proxy_config.password}"
        )

    if build_async_client:
        # Create and return the ApiClient
        api_client = AsyncApiClient(configuration=config)
        rest_client_wrapper = retry.RetryingRestWrapperAsync

    else:
        # Create and return the ApiClient
        api_client = ApiClient(configuration=config)
        rest_client_wrapper = retry.RetryingRestWrapper

    rc = api_client.rest_client
    wrapped_rest_client = rest_client_wrapper(rc)
    api_client.rest_client = wrapped_rest_client

    # set the application name if specified
    if app_name is not None:
        api_client.set_default_header("X-LUSID-Application", app_name)

    # set a correlation id for all requests initiated with this ApiClient
    corr_id = correlation_id or os.getenv("FBN_CORRELATION_ID")
    if corr_id is not None:
        api_client.set_default_header("CorrelationId", corr_id)

    return api_client
