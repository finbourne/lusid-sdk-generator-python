import json
import os
from importlib.resources import as_file, files
from typing import Dict, TextIO, Protocol, Union, IO, Callable
import logging

logger = logging.getLogger(__name__)

ENVIRONMENT_CONFIG_KEYS = {
  "token_url": "FBN_TOKEN_URL",
  "api_url":{{#lambda.uppercase}}"FBN_{{packageName}}_API_URL"{{/lambda.uppercase}},
  "username": "FBN_USERNAME",
  "password": "FBN_PASSWORD",
  "client_id": "FBN_CLIENT_ID",
  "client_secret": "FBN_CLIENT_SECRET",
  "app_name": "FBN_APP_NAME",
  "certificate_filename": "FBN_CLIENT_CERTIFICATE",
  "proxy_address": "FBN_PROXY_ADDRESS",
  "proxy_username": "FBN_PROXY_USERNAME",
  "proxy_password": "FBN_PROXY_PASSWORD",
  "access_token": "FBN_ACCESS_TOKEN"
}

SECRETS_FILE_CONFIG_KEYS = {
  "token_url": "tokenUrl",
  "api_url": "{{#lambda.camelcase}}{{^isLusidPackage}}{{packageName}}{{/isLusidPackage}}-api-Url{{/lambda.camelcase}}",
  "username": "username",
  "password": "password",
  "client_id": "clientId",
  "client_secret": "clientSecret",
  "app_name": "applicationName",
  "certificate_filename": "clientCertificate",
  "proxy_address": "address",
  "proxy_username": "username",
  "proxy_password": "password",
  "access_token": "accessToken"
}

class ConfigurationLoader(Protocol):
    """
    The ApiConfigurationLoader is responsible for populating the API and Proxy configuration from a secrets file or
    environment variables with preference given to the secrets file.
    """

    def load_config(self) -> Dict[str, str]:
        pass


class SecretsFileConfigurationLoader:
    def __init__(
        self,
        api_secrets_file: Union[TextIO, str],
        open: Callable[..., IO] = open,
    ):
        self._api_secrets_file = api_secrets_file
        self._open = open

    def load_config(self) -> Dict[str, str]:
        # The secrets file is a nested dictionary, set the names of the top level keys
        logger.debug(f"loading config from secrets file: {self._api_secrets_file}")
        api_config_key = "api"
        proxy_config_key = "proxy"
        try:
            try:
                config = json.load(self._api_secrets_file)
            except AttributeError:
                with self._open(self._api_secrets_file) as api_secrets_file:
                    config = json.load(api_secrets_file)
        except OSError:
            logger.exception(f"unable to open secrets file {self._api_secrets_file}")
            raise
        except json.JSONDecodeError:
            logger.exception("unable to deserialise contents of secrets file to json")
            raise

        populated_api_config_values = {
            key: config.get(api_config_key, {}).get(value)
            for key, value in SECRETS_FILE_CONFIG_KEYS.items()
            if "proxy" not in key
        }
        populated_proxy_values = {
            key: config.get(proxy_config_key, {}).get(value)
            for key, value in SECRETS_FILE_CONFIG_KEYS.items()
            if "proxy" in key
        }
        populated_config_dict = {
            **populated_api_config_values,
            **populated_proxy_values,
        }
        return populated_config_dict


class EnvironmentVariablesConfigurationLoader:
    def __init__(self, get_config=os.environ.get):
        self._get_config = get_config

    def load_config(self) -> Dict[str, str]:
        logger.debug(f"loading config from environment variables")

        populated_api_config_values = {
            key: self._get_config(value)
            for key, value in ENVIRONMENT_CONFIG_KEYS.items()
            if "proxy" not in key
        }
        populated_proxy_values = {
            key: self._get_config(value)
            for key, value in ENVIRONMENT_CONFIG_KEYS.items()
            if "proxy" in key
        }
        populated_config_dict = {
            **populated_api_config_values,
            **populated_proxy_values,
        }
        return populated_config_dict


class ArgsConfigurationLoader:
    def __init__(self, **kwargs):
        self._kwargs = kwargs

    def load_config(self) -> Dict[str, str]:
        logger.debug("loading config from arguments passed to ArgsConfigurationLoader")
        keys = ENVIRONMENT_CONFIG_KEYS.keys()
        return {key: self._kwargs.get(key) for key in keys}


default_config_loaders = (
    EnvironmentVariablesConfigurationLoader(),
    SecretsFileConfigurationLoader(api_secrets_file="secrets.json"),
)